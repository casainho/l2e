   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.adc_init,"ax",%progbits
  19              		.align	1
  20              		.global	adc_init
  21              		.thumb
  22              		.thumb_func
  24              	adc_init:
  25              	.LFB29:
  26              		.file 1 "adc.c"
   1:adc.c         **** /*
   2:adc.c         ****  * l2e
   3:adc.c         ****  *
   4:adc.c         ****  * Copyright (C) Jorge Pinto aka Casainho, 2016.
   5:adc.c         ****  *
   6:adc.c         ****  * Released under the GPL License, Version 3
   7:adc.c         ****  */
   8:adc.c         **** 
   9:adc.c         **** #include "stm32f10x_rcc.h"
  10:adc.c         **** #include "stm32f10x_gpio.h"
  11:adc.c         **** #include "stm32f10x_adc.h"
  12:adc.c         **** #include "stm32f10x_dma.h"
  13:adc.c         **** 
  14:adc.c         **** static unsigned int adc_values[2] = {0, 0};
  15:adc.c         **** 
  16:adc.c         **** void adc_init (void)
  17:adc.c         **** {
  27              		.loc 1 17 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 64
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 4, -16
  34              		.cfi_offset 5, -12
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 14, -4
  18:adc.c         ****   /* ADCCLK = PCLK2/8 */
  19:adc.c         ****   RCC_ADCCLKConfig(RCC_PCLK2_Div8);
  37              		.loc 1 19 0
  38 0002 4FF44040 		mov	r0, #49152
  17:adc.c         ****   /* ADCCLK = PCLK2/8 */
  39              		.loc 1 17 0
  40 0006 90B0     		sub	sp, sp, #64
  41              		.cfi_def_cfa_offset 80
  42              		.loc 1 19 0
  43 0008 304B     		ldr	r3, .L7
  44 000a 9847     		blx	r3
  45              	.LVL0:
  20:adc.c         **** 
  21:adc.c         ****   /* Enable DMA1 clock */
  22:adc.c         ****   RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
  46              		.loc 1 22 0
  47 000c 0120     		movs	r0, #1
  48 000e 0146     		mov	r1, r0
  49 0010 2F4B     		ldr	r3, .L7+4
  50 0012 9847     		blx	r3
  51              	.LVL1:
  23:adc.c         **** 
  24:adc.c         ****   DMA_InitTypeDef DMA_InitStructure;
  25:adc.c         ****   /* DMA1 channel1 configuration ----------------------------------------------*/
  26:adc.c         ****   DMA_DeInit(DMA1_Channel1);
  52              		.loc 1 26 0
  53 0014 2F48     		ldr	r0, .L7+8
  54 0016 304B     		ldr	r3, .L7+12
  55 0018 9847     		blx	r3
  56              	.LVL2:
  27:adc.c         ****   DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &(ADC1->DR);
  57              		.loc 1 27 0
  58 001a 304B     		ldr	r3, .L7+16
  28:adc.c         ****   DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc_values;
  29:adc.c         ****   DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  59              		.loc 1 29 0
  60 001c 0025     		movs	r5, #0
  27:adc.c         ****   DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &(ADC1->DR);
  61              		.loc 1 27 0
  62 001e 0593     		str	r3, [sp, #20]
  28:adc.c         ****   DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc_values;
  63              		.loc 1 28 0
  64 0020 2F4B     		ldr	r3, .L7+20
  30:adc.c         ****   DMA_InitStructure.DMA_BufferSize = 2;
  65              		.loc 1 30 0
  66 0022 0226     		movs	r6, #2
  28:adc.c         ****   DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc_values;
  67              		.loc 1 28 0
  68 0024 0693     		str	r3, [sp, #24]
  31:adc.c         ****   DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  32:adc.c         ****   DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  69              		.loc 1 32 0
  70 0026 8023     		movs	r3, #128
  71 0028 0A93     		str	r3, [sp, #40]
  33:adc.c         ****   DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  72              		.loc 1 33 0
  73 002a 4FF48073 		mov	r3, #256
  74 002e 0B93     		str	r3, [sp, #44]
  34:adc.c         ****   DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  75              		.loc 1 34 0
  76 0030 4FF40063 		mov	r3, #2048
  77 0034 0C93     		str	r3, [sp, #48]
  35:adc.c         ****   DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  78              		.loc 1 35 0
  79 0036 2023     		movs	r3, #32
  80 0038 0D93     		str	r3, [sp, #52]
  36:adc.c         ****   DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  81              		.loc 1 36 0
  82 003a 4FF40053 		mov	r3, #8192
  83 003e 0E93     		str	r3, [sp, #56]
  37:adc.c         ****   DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
  38:adc.c         ****   DMA_Init(DMA1_Channel1, &DMA_InitStructure);
  84              		.loc 1 38 0
  85 0040 2448     		ldr	r0, .L7+8
  86 0042 05A9     		add	r1, sp, #20
  87 0044 274B     		ldr	r3, .L7+24
  29:adc.c         ****   DMA_InitStructure.DMA_BufferSize = 2;
  88              		.loc 1 29 0
  89 0046 0795     		str	r5, [sp, #28]
  31:adc.c         ****   DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  90              		.loc 1 31 0
  91 0048 0995     		str	r5, [sp, #36]
  37:adc.c         ****   DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
  92              		.loc 1 37 0
  93 004a 0F95     		str	r5, [sp, #60]
  30:adc.c         ****   DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  94              		.loc 1 30 0
  95 004c 0896     		str	r6, [sp, #32]
  96              		.loc 1 38 0
  97 004e 9847     		blx	r3
  98              	.LVL3:
  39:adc.c         **** 
  40:adc.c         ****   /* Enable DMA1 channel1 */
  41:adc.c         ****   DMA_Cmd(DMA1_Channel1, ENABLE);
  99              		.loc 1 41 0
 100 0050 2048     		ldr	r0, .L7+8
 101 0052 0121     		movs	r1, #1
 102 0054 244B     		ldr	r3, .L7+28
 103 0056 9847     		blx	r3
 104              	.LVL4:
  42:adc.c         **** 
  43:adc.c         ****   ADC_InitTypeDef ADC_InitStructure;
  44:adc.c         ****   /* ADC1 configuration ------------------------------------------------------*/
  45:adc.c         ****   ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
  46:adc.c         ****   ADC_InitStructure.ADC_ScanConvMode = ENABLE;
  47:adc.c         ****   ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
  48:adc.c         ****   ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 105              		.loc 1 48 0
 106 0058 4FF46023 		mov	r3, #917504
  46:adc.c         ****   ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 107              		.loc 1 46 0
 108 005c 0124     		movs	r4, #1
 109              		.loc 1 48 0
 110 005e 0293     		str	r3, [sp, #8]
  49:adc.c         ****   ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  50:adc.c         ****   ADC_InitStructure.ADC_NbrOfChannel = 2;
  51:adc.c         ****   ADC_Init(ADC1, &ADC_InitStructure);
 111              		.loc 1 51 0
 112 0060 2248     		ldr	r0, .L7+32
 113 0062 6946     		mov	r1, sp
 114 0064 224B     		ldr	r3, .L7+36
  45:adc.c         ****   ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 115              		.loc 1 45 0
 116 0066 0095     		str	r5, [sp]
  49:adc.c         ****   ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 117              		.loc 1 49 0
 118 0068 0395     		str	r5, [sp, #12]
  46:adc.c         ****   ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 119              		.loc 1 46 0
 120 006a 8DF80440 		strb	r4, [sp, #4]
  47:adc.c         ****   ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 121              		.loc 1 47 0
 122 006e 8DF80540 		strb	r4, [sp, #5]
  50:adc.c         ****   ADC_Init(ADC1, &ADC_InitStructure);
 123              		.loc 1 50 0
 124 0072 8DF81060 		strb	r6, [sp, #16]
 125              		.loc 1 51 0
 126 0076 9847     		blx	r3
 127              	.LVL5:
  52:adc.c         **** 
  53:adc.c         ****   /* ADC1 regular channel0 configuration */
  54:adc.c         ****   ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_55Cycles5);
 128              		.loc 1 54 0
 129 0078 2946     		mov	r1, r5
 130 007a 1C48     		ldr	r0, .L7+32
 131 007c 2246     		mov	r2, r4
 132 007e 0523     		movs	r3, #5
 133 0080 1C4D     		ldr	r5, .L7+40
 134 0082 A847     		blx	r5
 135              	.LVL6:
  55:adc.c         ****   /* ADC1 regular channel1 configuration */
  56:adc.c         ****   ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_55Cycles5);
 136              		.loc 1 56 0
 137 0084 3246     		mov	r2, r6
 138 0086 1948     		ldr	r0, .L7+32
 139 0088 2146     		mov	r1, r4
 140 008a 0523     		movs	r3, #5
 141 008c A847     		blx	r5
 142              	.LVL7:
  57:adc.c         **** 
  58:adc.c         ****   /* Enable ADC1 DMA */
  59:adc.c         ****   ADC_DMACmd(ADC1, ENABLE);
 143              		.loc 1 59 0
 144 008e 1748     		ldr	r0, .L7+32
 145 0090 2146     		mov	r1, r4
 146 0092 194B     		ldr	r3, .L7+44
 147 0094 9847     		blx	r3
 148              	.LVL8:
  60:adc.c         **** 
  61:adc.c         ****   /* Enable ADC1 */
  62:adc.c         ****   ADC_Cmd(ADC1, ENABLE);
 149              		.loc 1 62 0
 150 0096 1548     		ldr	r0, .L7+32
 151 0098 184B     		ldr	r3, .L7+48
 152 009a 2146     		mov	r1, r4
 153 009c 9847     		blx	r3
 154              	.LVL9:
  63:adc.c         **** 
  64:adc.c         ****   /* Enable ADC1 reset calibration register */
  65:adc.c         ****   ADC_ResetCalibration(ADC1);
 155              		.loc 1 65 0
 156 009e 1348     		ldr	r0, .L7+32
 157 00a0 174B     		ldr	r3, .L7+52
 158 00a2 9847     		blx	r3
 159              	.LVL10:
 160              	.L2:
  66:adc.c         ****   /* Check the end of ADC1 reset calibration register */
  67:adc.c         ****   while(ADC_GetResetCalibrationStatus(ADC1));
 161              		.loc 1 67 0 discriminator 1
 162 00a4 1148     		ldr	r0, .L7+32
 163 00a6 174B     		ldr	r3, .L7+56
 164 00a8 9847     		blx	r3
 165              	.LVL11:
 166 00aa 0028     		cmp	r0, #0
 167 00ac FAD1     		bne	.L2
  68:adc.c         **** 
  69:adc.c         ****   /* Start ADC1 calibration */
  70:adc.c         ****   ADC_StartCalibration(ADC1);
 168              		.loc 1 70 0
 169 00ae 0F48     		ldr	r0, .L7+32
 170 00b0 154B     		ldr	r3, .L7+60
 171 00b2 9847     		blx	r3
 172              	.LVL12:
 173              	.L3:
  71:adc.c         ****   /* Check the end of ADC1 calibration */
  72:adc.c         ****   while(ADC_GetCalibrationStatus(ADC1));
 174              		.loc 1 72 0 discriminator 1
 175 00b4 0D48     		ldr	r0, .L7+32
 176 00b6 154B     		ldr	r3, .L7+64
 177 00b8 9847     		blx	r3
 178              	.LVL13:
 179 00ba 0028     		cmp	r0, #0
 180 00bc FAD1     		bne	.L3
  73:adc.c         **** 
  74:adc.c         ****   /* Start ADC1 Software Conversion */
  75:adc.c         ****   ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 181              		.loc 1 75 0
 182 00be 0B48     		ldr	r0, .L7+32
 183 00c0 0121     		movs	r1, #1
 184 00c2 134B     		ldr	r3, .L7+68
 185 00c4 9847     		blx	r3
 186              	.LVL14:
  76:adc.c         **** }
 187              		.loc 1 76 0
 188 00c6 10B0     		add	sp, sp, #64
 189              		.cfi_def_cfa_offset 16
 190              		@ sp needed
 191 00c8 70BD     		pop	{r4, r5, r6, pc}
 192              	.L8:
 193 00ca 00BF     		.align	2
 194              	.L7:
 195 00cc 00000000 		.word	RCC_ADCCLKConfig
 196 00d0 00000000 		.word	RCC_AHBPeriphClockCmd
 197 00d4 08000240 		.word	1073872904
 198 00d8 00000000 		.word	DMA_DeInit
 199 00dc 4C240140 		.word	1073816652
 200 00e0 00000000 		.word	.LANCHOR0
 201 00e4 00000000 		.word	DMA_Init
 202 00e8 00000000 		.word	DMA_Cmd
 203 00ec 00240140 		.word	1073816576
 204 00f0 00000000 		.word	ADC_Init
 205 00f4 00000000 		.word	ADC_RegularChannelConfig
 206 00f8 00000000 		.word	ADC_DMACmd
 207 00fc 00000000 		.word	ADC_Cmd
 208 0100 00000000 		.word	ADC_ResetCalibration
 209 0104 00000000 		.word	ADC_GetResetCalibrationStatus
 210 0108 00000000 		.word	ADC_StartCalibration
 211 010c 00000000 		.word	ADC_GetCalibrationStatus
 212 0110 00000000 		.word	ADC_SoftwareStartConvCmd
 213              		.cfi_endproc
 214              	.LFE29:
 216              		.section	.text.adc_get_potentiometer_value,"ax",%progbits
 217              		.align	1
 218              		.global	adc_get_potentiometer_value
 219              		.thumb
 220              		.thumb_func
 222              	adc_get_potentiometer_value:
 223              	.LFB30:
  77:adc.c         **** 
  78:adc.c         **** unsigned int adc_get_potentiometer_value (void)
  79:adc.c         **** {
 224              		.loc 1 79 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              		@ link register save eliminated.
  80:adc.c         ****   return adc_values[0];
  81:adc.c         **** }
 229              		.loc 1 81 0
 230 0000 014B     		ldr	r3, .L10
 231 0002 1868     		ldr	r0, [r3]
 232 0004 7047     		bx	lr
 233              	.L11:
 234 0006 00BF     		.align	2
 235              	.L10:
 236 0008 00000000 		.word	.LANCHOR0
 237              		.cfi_endproc
 238              	.LFE30:
 240              		.section	.text.adc_get_magnetic_sensor_value,"ax",%progbits
 241              		.align	1
 242              		.global	adc_get_magnetic_sensor_value
 243              		.thumb
 244              		.thumb_func
 246              	adc_get_magnetic_sensor_value:
 247              	.LFB31:
  82:adc.c         **** 
  83:adc.c         **** unsigned int adc_get_magnetic_sensor_value (void)
  84:adc.c         **** {
 248              		.loc 1 84 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              		@ link register save eliminated.
  85:adc.c         ****   return adc_values[1];
  86:adc.c         **** }
 253              		.loc 1 86 0
 254 0000 014B     		ldr	r3, .L13
 255 0002 5868     		ldr	r0, [r3, #4]
 256 0004 7047     		bx	lr
 257              	.L14:
 258 0006 00BF     		.align	2
 259              	.L13:
 260 0008 00000000 		.word	.LANCHOR0
 261              		.cfi_endproc
 262              	.LFE31:
 264              		.section	.bss.adc_values,"aw",%nobits
 265              		.align	2
 266              		.set	.LANCHOR0,. + 0
 269              	adc_values:
 270 0000 00000000 		.space	8
 270      00000000 
 271              		.text
 272              	.Letext0:
 273              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 274              		.file 3 "/usr/include/newlib/stdint.h"
 275              		.file 4 "./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 276              		.file 5 "./Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
 277              		.file 6 "./Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
 278              		.file 7 "./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
     /tmp/ccjdwVUf.s:19     .text.adc_init:00000000 $t
     /tmp/ccjdwVUf.s:24     .text.adc_init:00000000 adc_init
     /tmp/ccjdwVUf.s:195    .text.adc_init:000000cc $d
     /tmp/ccjdwVUf.s:217    .text.adc_get_potentiometer_value:00000000 $t
     /tmp/ccjdwVUf.s:222    .text.adc_get_potentiometer_value:00000000 adc_get_potentiometer_value
     /tmp/ccjdwVUf.s:236    .text.adc_get_potentiometer_value:00000008 $d
     /tmp/ccjdwVUf.s:241    .text.adc_get_magnetic_sensor_value:00000000 $t
     /tmp/ccjdwVUf.s:246    .text.adc_get_magnetic_sensor_value:00000000 adc_get_magnetic_sensor_value
     /tmp/ccjdwVUf.s:260    .text.adc_get_magnetic_sensor_value:00000008 $d
     /tmp/ccjdwVUf.s:265    .bss.adc_values:00000000 $d
     /tmp/ccjdwVUf.s:269    .bss.adc_values:00000000 adc_values
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_ADCCLKConfig
RCC_AHBPeriphClockCmd
DMA_DeInit
DMA_Init
DMA_Cmd
ADC_Init
ADC_RegularChannelConfig
ADC_DMACmd
ADC_Cmd
ADC_ResetCalibration
ADC_GetResetCalibrationStatus
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_SoftwareStartConvCmd
